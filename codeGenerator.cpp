#include <iostream>
#include <fstream>
#include <string.h>
using namespace std;

#define code_file_name "code.cpp"

class CodeGenerator {

public:
	//Generate the linear code given the user input
	void linear_code(string user_input);

	//Starts the code 
	void start();

	//Finishes the code
	void finish();

	//Inclues the functions for the gps
	void gps_code();

	//Inclues the functions for the bmp
	void bmp_code();

	//Inclues the functions for the communication
	void comm_code();
};


void CodeGenerator::linear_code(string user_input){

	CodeGenerator code_gen;

	//For each character in user_input, generate it's respective
	//piece of code
	for(int i=0; i<sizeof(user_input); i++){
		//For each number there is a respective code
		switch(user_input[i]){
			case '1':
				code_gen.gps_code();
				break;
			case '2':
				code_gen.bmp_code();
				break;
			case '3':
				code_gen.comm_code();
				break;
		}
	}

	return;
}

void CodeGenerator::start(){

	//Starts the generated code file
	ofstream code_file;
	string code;

	code_file.open(code_file_name);

	code = "//This code was generated by codeGenerator\n";
	//Fist, all the includes should be put here
	code = code + "#include<iostream>\n";
	//Namespace std, default in c++ applications
	code = code + "using namespace std;\n\n";
	//Starts the main function
	code = code + "int main(){\n";
	//Code....

	//Writes to file
	code_file << code;
	code_file.close();
}

void CodeGenerator::finish(){

	//Starts the generated code file
	ofstream code_file;
	string code;

	//Open the file to append
	code_file.open(code_file_name, ios_base::app);

	//Writes the main return and closes the code
	code = "\n";
	code = code + "	return 0;\n";
	code = code + "}";

	//Writes to file
	code_file << code;
	code_file.close();
}

void CodeGenerator::gps_code(){

	//Starts the generated code file
	ofstream code_file;
	string code;

	//Open the file to append
	code_file.open(code_file_name, ios_base::app);

	code = "\n";
	code = code + "	//Code for the gps\n";
	code = code + "	set_gps();\n";
	code = code + "	get_gps();\n";
	code = code + "\n";

	//Writes to file
	code_file << code;
	code_file.close();
}

void CodeGenerator::bmp_code(){

	//Starts the generated code file
	ofstream code_file;
	string code;

	//Open the file to append
	code_file.open(code_file_name, ios_base::app);

	code = "\n";
	code = code + "	//Code for the bmp\n";
	code = code + "	set_bmp();\n";
	code = code + "	get_bmp();\n";
	code = code + "\n";

	//Writes to file
	code_file << code;
	code_file.close();
}

void CodeGenerator::comm_code(){

	//Starts the generated code file
	ofstream code_file;
	string code;

	//Open the file to append
	code_file.open(code_file_name, ios_base::app);

	code = "\n";
	code = code + "	//Code for the communication\n";
	code = code + "	open_comm();\n";
	code = code + "	send_data();\n";
	code = code + "	close_comm();\n";
	code = code + "\n";

	//Writes to file
	code_file << code;
	code_file.close();
}

int main(){

	string user_input;
	CodeGenerator code_gen;

	//Rads the user input
	cout << "Enter a string informing which componentes\n";
	cout << "you want to add to your system: \n\n";
	cout << "Options: \n1-GPS\n2-BMP\n3-Communication\n\nInput:";
	getline(cin, user_input);

	//Starts the code
	code_gen.start();
	//Write the linear code
	code_gen.linear_code(user_input);
	//Finishes the code
	code_gen.finish();

	return 0;
}